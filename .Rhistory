getwd()
setwd('..')
library(devtools)
devtools::check()
?axis
?abline
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(tidyverse)
library("styler")
library(styler)
install.packages(styler)
install.packages('styler')
style
style_text
library(styler)
style_text()
style_text()
library(usethis)
use_tidy_style()
use_tidy_style()
devtools::check()
devtools::check()
tuning_cv_svd <- function(lambda, w, svd.int, y.int) {
H <- svd.int$u %*% diag(svd.int$d^2 / (svd.int$d^2 + lambda)) %*% t(svd.int$u)
e <- (diag(length(y.int)) - H) %*% y.int
return(mean(w * (e / (1 - diag(H)))^2))
}
p <- 5
#' n <- 20
#' sigma <- 1
#' beta <- rep(1, p)
#'
#' ## Simulating design matrix, X
#' set.seed(556)
#' X <- matrix(rnorm(n * p), n, p)
#'
#' ## Simulate outcome vector, Y
#' y <- X %*% beta + rnorm(n, 0, sigma)
#'
p <- 5
n <- 20
sigma <- 1
beta <- rep(1, p)
set.seed(556)
X <- matrix(rnorm(n * p), n, p)
y <- X %*% beta + rnorm(n, 0, sigma)
plot(X[,1],y)
which.min(X[,1])
devtools::check()
devtools::check()
rm(list = c("tuning_cv_svd"))
devtools::check()
devtools::check()
devtools::check()
